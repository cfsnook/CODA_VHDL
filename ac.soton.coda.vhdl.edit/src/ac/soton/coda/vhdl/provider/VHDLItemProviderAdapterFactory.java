/**
 */
package ac.soton.coda.vhdl.provider;

import ac.soton.coda.vhdl.util.VHDLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VHDLItemProviderAdapterFactory extends VHDLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VHDLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLExpressionElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLExpressionElementItemProvider vhdlExpressionElementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLExpressionElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLExpressionElementAdapter() {
		if (vhdlExpressionElementItemProvider == null) {
			vhdlExpressionElementItemProvider = new VHDLExpressionElementItemProvider(this);
		}

		return vhdlExpressionElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLDesignFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLDesignFileItemProvider vhdlDesignFileItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLDesignFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLDesignFileAdapter() {
		if (vhdlDesignFileItemProvider == null) {
			vhdlDesignFileItemProvider = new VHDLDesignFileItemProvider(this);
		}

		return vhdlDesignFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLDesignUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLDesignUnitItemProvider vhdlDesignUnitItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLDesignUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLDesignUnitAdapter() {
		if (vhdlDesignUnitItemProvider == null) {
			vhdlDesignUnitItemProvider = new VHDLDesignUnitItemProvider(this);
		}

		return vhdlDesignUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLLibraryClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLLibraryClauseItemProvider vhdlLibraryClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLLibraryClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLLibraryClauseAdapter() {
		if (vhdlLibraryClauseItemProvider == null) {
			vhdlLibraryClauseItemProvider = new VHDLLibraryClauseItemProvider(this);
		}

		return vhdlLibraryClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLLogicalName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLLogicalNameItemProvider vhdlLogicalNameItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLLogicalName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLLogicalNameAdapter() {
		if (vhdlLogicalNameItemProvider == null) {
			vhdlLogicalNameItemProvider = new VHDLLogicalNameItemProvider(this);
		}

		return vhdlLogicalNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLUseClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLUseClauseItemProvider vhdlUseClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLUseClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLUseClauseAdapter() {
		if (vhdlUseClauseItemProvider == null) {
			vhdlUseClauseItemProvider = new VHDLUseClauseItemProvider(this);
		}

		return vhdlUseClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLSelectedName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLSelectedNameItemProvider vhdlSelectedNameItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLSelectedName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLSelectedNameAdapter() {
		if (vhdlSelectedNameItemProvider == null) {
			vhdlSelectedNameItemProvider = new VHDLSelectedNameItemProvider(this);
		}

		return vhdlSelectedNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLEntityDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLEntityDeclarationItemProvider vhdlEntityDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLEntityDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLEntityDeclarationAdapter() {
		if (vhdlEntityDeclarationItemProvider == null) {
			vhdlEntityDeclarationItemProvider = new VHDLEntityDeclarationItemProvider(this);
		}

		return vhdlEntityDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLInterfaceList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLInterfaceListItemProvider vhdlInterfaceListItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLInterfaceList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLInterfaceListAdapter() {
		if (vhdlInterfaceListItemProvider == null) {
			vhdlInterfaceListItemProvider = new VHDLInterfaceListItemProvider(this);
		}

		return vhdlInterfaceListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLInterfaceSignalDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLInterfaceSignalDeclarationItemProvider vhdlInterfaceSignalDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLInterfaceSignalDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLInterfaceSignalDeclarationAdapter() {
		if (vhdlInterfaceSignalDeclarationItemProvider == null) {
			vhdlInterfaceSignalDeclarationItemProvider = new VHDLInterfaceSignalDeclarationItemProvider(this);
		}

		return vhdlInterfaceSignalDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLSubtypeIndication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLSubtypeIndicationItemProvider vhdlSubtypeIndicationItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLSubtypeIndication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLSubtypeIndicationAdapter() {
		if (vhdlSubtypeIndicationItemProvider == null) {
			vhdlSubtypeIndicationItemProvider = new VHDLSubtypeIndicationItemProvider(this);
		}

		return vhdlSubtypeIndicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLFullTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLFullTypeDeclarationItemProvider vhdlFullTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLFullTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLFullTypeDeclarationAdapter() {
		if (vhdlFullTypeDeclarationItemProvider == null) {
			vhdlFullTypeDeclarationItemProvider = new VHDLFullTypeDeclarationItemProvider(this);
		}

		return vhdlFullTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLEnumerationTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLEnumerationTypeDefinitionItemProvider vhdlEnumerationTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLEnumerationTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLEnumerationTypeDefinitionAdapter() {
		if (vhdlEnumerationTypeDefinitionItemProvider == null) {
			vhdlEnumerationTypeDefinitionItemProvider = new VHDLEnumerationTypeDefinitionItemProvider(this);
		}

		return vhdlEnumerationTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLEnumerationLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLEnumerationLiteralItemProvider vhdlEnumerationLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLEnumerationLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLEnumerationLiteralAdapter() {
		if (vhdlEnumerationLiteralItemProvider == null) {
			vhdlEnumerationLiteralItemProvider = new VHDLEnumerationLiteralItemProvider(this);
		}

		return vhdlEnumerationLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLArchitectureBody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLArchitectureBodyItemProvider vhdlArchitectureBodyItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLArchitectureBody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLArchitectureBodyAdapter() {
		if (vhdlArchitectureBodyItemProvider == null) {
			vhdlArchitectureBodyItemProvider = new VHDLArchitectureBodyItemProvider(this);
		}

		return vhdlArchitectureBodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLProcessStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLProcessStatementItemProvider vhdlProcessStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLProcessStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLProcessStatementAdapter() {
		if (vhdlProcessStatementItemProvider == null) {
			vhdlProcessStatementItemProvider = new VHDLProcessStatementItemProvider(this);
		}

		return vhdlProcessStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLSignalName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLSignalNameItemProvider vhdlSignalNameItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLSignalName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLSignalNameAdapter() {
		if (vhdlSignalNameItemProvider == null) {
			vhdlSignalNameItemProvider = new VHDLSignalNameItemProvider(this);
		}

		return vhdlSignalNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLAssertionStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLAssertionStatementItemProvider vhdlAssertionStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLAssertionStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLAssertionStatementAdapter() {
		if (vhdlAssertionStatementItemProvider == null) {
			vhdlAssertionStatementItemProvider = new VHDLAssertionStatementItemProvider(this);
		}

		return vhdlAssertionStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLAssertionItemProvider vhdlAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLAssertionAdapter() {
		if (vhdlAssertionItemProvider == null) {
			vhdlAssertionItemProvider = new VHDLAssertionItemProvider(this);
		}

		return vhdlAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLSignalAssignmentStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLSignalAssignmentStatementItemProvider vhdlSignalAssignmentStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLSignalAssignmentStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLSignalAssignmentStatementAdapter() {
		if (vhdlSignalAssignmentStatementItemProvider == null) {
			vhdlSignalAssignmentStatementItemProvider = new VHDLSignalAssignmentStatementItemProvider(this);
		}

		return vhdlSignalAssignmentStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLIfStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLIfStatementItemProvider vhdlIfStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLIfStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLIfStatementAdapter() {
		if (vhdlIfStatementItemProvider == null) {
			vhdlIfStatementItemProvider = new VHDLIfStatementItemProvider(this);
		}

		return vhdlIfStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLIfClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLIfClauseItemProvider vhdlIfClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLIfClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLIfClauseAdapter() {
		if (vhdlIfClauseItemProvider == null) {
			vhdlIfClauseItemProvider = new VHDLIfClauseItemProvider(this);
		}

		return vhdlIfClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLElsifClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLElsifClauseItemProvider vhdlElsifClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLElsifClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLElsifClauseAdapter() {
		if (vhdlElsifClauseItemProvider == null) {
			vhdlElsifClauseItemProvider = new VHDLElsifClauseItemProvider(this);
		}

		return vhdlElsifClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLElseClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLElseClauseItemProvider vhdlElseClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLElseClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLElseClauseAdapter() {
		if (vhdlElseClauseItemProvider == null) {
			vhdlElseClauseItemProvider = new VHDLElseClauseItemProvider(this);
		}

		return vhdlElseClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLCaseStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLCaseStatementItemProvider vhdlCaseStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLCaseStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLCaseStatementAdapter() {
		if (vhdlCaseStatementItemProvider == null) {
			vhdlCaseStatementItemProvider = new VHDLCaseStatementItemProvider(this);
		}

		return vhdlCaseStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.coda.vhdl.IVHDLCaseStatementAlternative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VHDLCaseStatementAlternativeItemProvider vhdlCaseStatementAlternativeItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.coda.vhdl.IVHDLCaseStatementAlternative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVHDLCaseStatementAlternativeAdapter() {
		if (vhdlCaseStatementAlternativeItemProvider == null) {
			vhdlCaseStatementAlternativeItemProvider = new VHDLCaseStatementAlternativeItemProvider(this);
		}

		return vhdlCaseStatementAlternativeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (vhdlExpressionElementItemProvider != null) vhdlExpressionElementItemProvider.dispose();
		if (vhdlDesignFileItemProvider != null) vhdlDesignFileItemProvider.dispose();
		if (vhdlDesignUnitItemProvider != null) vhdlDesignUnitItemProvider.dispose();
		if (vhdlLibraryClauseItemProvider != null) vhdlLibraryClauseItemProvider.dispose();
		if (vhdlLogicalNameItemProvider != null) vhdlLogicalNameItemProvider.dispose();
		if (vhdlUseClauseItemProvider != null) vhdlUseClauseItemProvider.dispose();
		if (vhdlSelectedNameItemProvider != null) vhdlSelectedNameItemProvider.dispose();
		if (vhdlEntityDeclarationItemProvider != null) vhdlEntityDeclarationItemProvider.dispose();
		if (vhdlInterfaceListItemProvider != null) vhdlInterfaceListItemProvider.dispose();
		if (vhdlInterfaceSignalDeclarationItemProvider != null) vhdlInterfaceSignalDeclarationItemProvider.dispose();
		if (vhdlSubtypeIndicationItemProvider != null) vhdlSubtypeIndicationItemProvider.dispose();
		if (vhdlFullTypeDeclarationItemProvider != null) vhdlFullTypeDeclarationItemProvider.dispose();
		if (vhdlEnumerationTypeDefinitionItemProvider != null) vhdlEnumerationTypeDefinitionItemProvider.dispose();
		if (vhdlEnumerationLiteralItemProvider != null) vhdlEnumerationLiteralItemProvider.dispose();
		if (vhdlArchitectureBodyItemProvider != null) vhdlArchitectureBodyItemProvider.dispose();
		if (vhdlProcessStatementItemProvider != null) vhdlProcessStatementItemProvider.dispose();
		if (vhdlSignalNameItemProvider != null) vhdlSignalNameItemProvider.dispose();
		if (vhdlAssertionStatementItemProvider != null) vhdlAssertionStatementItemProvider.dispose();
		if (vhdlAssertionItemProvider != null) vhdlAssertionItemProvider.dispose();
		if (vhdlSignalAssignmentStatementItemProvider != null) vhdlSignalAssignmentStatementItemProvider.dispose();
		if (vhdlIfStatementItemProvider != null) vhdlIfStatementItemProvider.dispose();
		if (vhdlIfClauseItemProvider != null) vhdlIfClauseItemProvider.dispose();
		if (vhdlElsifClauseItemProvider != null) vhdlElsifClauseItemProvider.dispose();
		if (vhdlElseClauseItemProvider != null) vhdlElseClauseItemProvider.dispose();
		if (vhdlCaseStatementItemProvider != null) vhdlCaseStatementItemProvider.dispose();
		if (vhdlCaseStatementAlternativeItemProvider != null) vhdlCaseStatementAlternativeItemProvider.dispose();
	}

}
